name: Test

on:
  push:
    branches:
    - main
  pull_request:
    branches:
    - main

jobs:
  build-test-image:
    timeout-minutes: 5
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and export
        uses: docker/build-push-action@v5
        with:
          target: tests
          context: .
          tags: ${{ github.event.repository.name }}:${{ github.sha }}
          outputs: type=docker,dest=/tmp/${{ github.event.repository.name }}.${{ github.sha }}.tar

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ github.event.repository.name }}.${{ github.sha }}
          path: /tmp/${{ github.event.repository.name }}.${{ github.sha }}.tar

  lint:
    timeout-minutes: 5
    runs-on: ubuntu-22.04
    needs: build-test-image

    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ github.event.repository.name }}.${{ github.sha }}
          path: /tmp

      - name: Load image
        run: |
          docker load --input /tmp/${{ github.event.repository.name }}.${{ github.sha }}.tar
          docker image ls -a

      - name: Run lint
        run: |
          export APPLICATION_IMAGE=${{ github.event.repository.name }}:${{ github.sha }}
          docker compose --profile lint up

      - name: Stop containers
        if: always()
        run: docker compose --profile lint down

  test:
    timeout-minutes: 5
    runs-on: ubuntu-22.04
    needs: build-test-image

    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ github.event.repository.name }}.${{ github.sha }}
          path: /tmp

      - name: Load image
        run: |
          docker load --input /tmp/${{ github.event.repository.name }}.${{ github.sha }}.tar
          docker image ls -a

      - name: Run tests
        run: |
          export APPLICATION_IMAGE=${{ github.event.repository.name }}:${{ github.sha }}
          docker compose --profile test run test

      - name: Stop containers
        if: always()
        run: docker compose --profile test down
